[
  {
    "code": "function calculateSum(numbers) {\n  return numbers.reduce((acc, num) => acc + num, 0);\n}",
    "language": "JavaScript",
    "distractors": ["TypeScript", "Java", "C#"]
  },
  {
    "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
    "language": "Python",
    "distractors": ["Ruby", "JavaScript", "Lua"]
  },
  {
    "code": "public class Calculator {\n    private int result;\n    \n    public int add(int a, int b) {\n        return a + b;\n    }\n}",
    "language": "Java",
    "distractors": ["C#", "C++", "Kotlin"]
  },
  {
    "code": "fn binary_search<T: Ord>(arr: &[T], target: &T) -> Option<usize> {\n    let mut left = 0;\n    let mut right = arr.len();\n    \n    while left < right {\n        let mid = left + (right - left) / 2;\n        match arr[mid].cmp(target) {\n            std::cmp::Ordering::Equal => return Some(mid),\n            std::cmp::Ordering::Less => left = mid + 1,\n            std::cmp::Ordering::Greater => right = mid,\n        }\n    }\n    None\n}",
    "language": "Rust",
    "distractors": ["Go", "C++", "Zig"]
  },
  {
    "code": "package main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc main() {\n    fmt.Println(fibonacci(10))\n}",
    "language": "Go",
    "distractors": ["Rust", "C", "Swift"]
  },
  {
    "code": "<?php\nclass User {\n    private $name;\n    private $email;\n    \n    public function __construct($name, $email) {\n        $this->name = $name;\n        $this->email = $email;\n    }\n    \n    public function getName() {\n        return $this->name;\n    }\n}\n?>",
    "language": "PHP",
    "distractors": ["JavaScript", "Python", "Ruby"]
  },
  {
    "code": "class Person\n  attr_accessor :name, :age\n  \n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\n  \n  def adult?\n    @age >= 18\n  end\nend",
    "language": "Ruby",
    "distractors": ["Python", "Crystal", "Elixir"]
  },
  {
    "code": "struct Point {\n    let x: Double\n    let y: Double\n    \n    func distance(to other: Point) -> Double {\n        let dx = x - other.x\n        let dy = y - other.y\n        return sqrt(dx*dx + dy*dy)\n    }\n}",
    "language": "Swift",
    "distractors": ["Kotlin", "Rust", "C#"]
  },
  {
    "code": "data class User(\n    val id: Long,\n    val name: String,\n    val email: String\n) {\n    fun isValidEmail(): Boolean {\n        return email.contains(\"@\") && email.contains(\".\")\n    }\n}",
    "language": "Kotlin",
    "distractors": ["Java", "Scala", "Swift"]
  },
  {
    "code": "using System.Collections.Generic;\n\npublic class Repository<T> where T : class\n{\n    private readonly List<T> _items = new();\n    \n    public void Add(T item) => _items.Add(item);\n    \n    public T? Find(Func<T, bool> predicate) => \n        _items.FirstOrDefault(predicate);\n}",
    "language": "C#",
    "distractors": ["Java", "F#", "VB.NET"]
  },
  {
    "code": "#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nvoid quickSort(std::vector<T>& arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}",
    "language": "C++",
    "distractors": ["C", "Rust", "Java"]
  },
  {
    "code": "SELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nWHERE u.created_at >= '2023-01-01'\nGROUP BY u.id, u.name\nHAVING COUNT(o.id) > 5\nORDER BY order_count DESC;",
    "language": "SQL",
    "distractors": ["PostgreSQL", "MySQL", "NoSQL"]
  },
  {
    "code": "<div class=\"container\">\n  <h2 *ngIf=\"showTitle\">{{ pageTitle }}</h2>\n  <ul>\n    <li *ngFor=\"let item of items; trackBy: trackByFn\">\n      {{ item.name }} - {{ item.price | currency }}\n    </li>\n  </ul>\n</div>",
    "language": "Angular",
    "distractors": ["Vue.js", "React", "Svelte"]
  },
  {
    "code": "const UserCard = ({ user, onEdit, onDelete }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  return (\n    <div className=\"user-card\">\n      <h3>{user.name}</h3>\n      <p>{user.email}</p>\n      <button onClick={() => onEdit(user.id)}>\n        Edit\n      </button>\n    </div>\n  );\n};",
    "language": "React",
    "distractors": ["Vue.js", "Angular", "JavaScript"]
  },
  {
    "code": "<template>\n  <div class=\"todo-list\">\n    <input \n      v-model=\"newTodo\" \n      @keyup.enter=\"addTodo\"\n      placeholder=\"Add new todo\"\n    />\n    <ul>\n      <li v-for=\"todo in filteredTodos\" :key=\"todo.id\">\n        {{ todo.text }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst newTodo = ref('')\nconst todos = ref([])\n</script>",
    "language": "Vue.js",
    "distractors": ["Angular", "React", "Svelte"]
  },
  {
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint* createArray(int size) {\n    int* arr = malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i * i;\n    }\n    return arr;\n}",
    "language": "C",
    "distractors": ["C++", "Rust", "Go"]
  },
  {
    "code": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/api/users/:id', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id);\n    res.json(user);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});",
    "language": "Node.js",
    "distractors": ["JavaScript", "Deno", "TypeScript"]
  },
  {
    "code": ".card {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: 1rem;\n  padding: 2rem;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n}",
    "language": "CSS",
    "distractors": ["SCSS", "Stylus", "Less"]
  },
  {
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Dashboard</title>\n</head>\n<body>\n  <nav aria-label=\"Main navigation\">\n    <ul role=\"list\">\n      <li><a href=\"/home\">Home</a></li>\n      <li><a href=\"/about\">About</a></li>\n    </ul>\n  </nav>\n</body>\n</html>",
    "language": "HTML",
    "distractors": ["XML", "XHTML", "JSX"]
  },
  {
    "code": "numbers = [1, 2, 3, 4, 5]\nsquared = [x**2 for x in numbers if x % 2 == 0]\nprint(f\"Squared even numbers: {squared}\")\n\ndata = {'name': 'Alice', 'age': 30}\nfor key, value in data.items():\n    print(f\"{key}: {value}\")",
    "language": "Python",
    "distractors": ["Ruby", "JavaScript", "Perl"]
  },
  {
    "code": "interface ApiResponse<T> {\n  data: T;\n  status: number;\n  message?: string;\n}\n\nclass ApiClient {\n  async get<T>(url: string): Promise<ApiResponse<T>> {\n    const response = await fetch(url);\n    return response.json();\n  }\n}",
    "language": "TypeScript",
    "distractors": ["JavaScript", "Flow", "Dart"]
  },
  {
    "code": "library(dplyr)\nlibrary(ggplot2)\n\ndata %>%\n  filter(age >= 18) %>%\n  group_by(category) %>%\n  summarise(\n    mean_score = mean(score, na.rm = TRUE),\n    count = n()\n  ) %>%\n  ggplot(aes(x = category, y = mean_score)) +\n  geom_col() +\n  labs(title = \"Average Scores by Category\")",
    "language": "R",
    "distractors": ["Python", "MATLAB", "Julia"]
  },
  {
    "code": "#!/bin/bash\n\nfor file in *.txt; do\n  if [[ -f \"$file\" ]]; then\n    echo \"Processing $file\"\n    wc -l \"$file\" >> line_counts.txt\n  fi\ndone\n\necho \"Total files processed: $(ls *.txt | wc -l)\"",
    "language": "Bash",
    "distractors": ["Zsh", "PowerShell", "Fish"]
  },
  {
    "code": "@Grab('org.apache.commons:commons-lang3:3.12.0')\nimport org.apache.commons.lang3.StringUtils\n\ndef processText(String input) {\n    return StringUtils.capitalize(\n        StringUtils.reverse(input.toLowerCase())\n    )\n}\n\ndefaultTasks = ['build', 'test']\ndefaultTasks.each { task ->\n    println \"Executing: ${task}\"\n}",
    "language": "Groovy",
    "distractors": ["Java", "Scala", "Kotlin"]
  },
  {
    "code": "import Foundation\n\nclass NetworkManager: ObservableObject {\n    @Published var isLoading = false\n    \n    func fetchData() async throws -> [User] {\n        isLoading = true\n        defer { isLoading = false }\n        \n        let url = URL(string: \"https://api.example.com/users\")!\n        let (data, _) = try await URLSession.shared.data(from: url)\n        return try JSONDecoder().decode([User].self, from: data)\n    }\n}",
    "language": "Swift",
    "distractors": ["Objective-C", "Kotlin", "Dart"]
  },
  {
    "code": "suspend fun fetchUserData(userId: String): Result<User> {\n    return withContext(Dispatchers.IO) {\n        try {\n            val response = apiService.getUser(userId)\n            if (response.isSuccessful) {\n                Result.success(response.body()!!)\n            } else {\n                Result.failure(ApiException(response.message()))\n            }\n        } catch (e: Exception) {\n            Result.failure(e)\n        }\n    }\n}",
    "language": "Kotlin",
    "distractors": ["Java", "Scala", "C#"]
  },
  {
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <appSettings>\n    <add key=\"DatabaseConnection\" value=\"Server=localhost;Database=MyApp\" />\n    <add key=\"EnableLogging\" value=\"true\" />\n    <add key=\"MaxRetries\" value=\"3\" />\n  </appSettings>\n  <system.web>\n    <compilation debug=\"false\" targetFramework=\"4.8\" />\n  </system.web>\n</configuration>",
    "language": "XML",
    "distractors": ["HTML", "XAML", "JSON"]
  },
  {
    "code": "{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"build\": \"webpack --mode production\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.0\",\n    \"mongoose\": \"^6.3.0\"\n  }\n}",
    "language": "JSON",
    "distractors": ["JavaScript", "YAML", "TOML"]
  },
  {
    "code": "module Calculator exposing (add, multiply, divide)\n\nadd : Float -> Float -> Float\nadd x y = x + y\n\nmultiply : Float -> Float -> Float\nmultiply x y = x * y\n\ndivide : Float -> Float -> Maybe Float\ndivide x y =\n    if y == 0 then\n        Nothing\n    else\n        Just (x / y)",
    "language": "Elm",
    "distractors": ["Haskell", "PureScript", "F#"]
  },
  {
    "code": "factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n\nfibonacci :: Integer -> Integer\nfibonacci n = fib n 0 1\n  where\n    fib 0 a _ = a\n    fib n a b = fib (n-1) b (a+b)",
    "language": "Haskell",
    "distractors": ["OCaml", "F#", "Elm"]
  },
  {
    "code": "#import <Foundation/Foundation.h>\n\n@interface Calculator : NSObject\n- (NSInteger)addNumber:(NSInteger)a toNumber:(NSInteger)b;\n- (NSInteger)multiplyNumber:(NSInteger)a byNumber:(NSInteger)b;\n@end\n\n@implementation Calculator\n- (NSInteger)addNumber:(NSInteger)a toNumber:(NSInteger)b {\n    return a + b;\n}\n@end",
    "language": "Objective-C",
    "distractors": ["C", "C++", "Swift"]
  },
  {
    "code": "object Calculator {\n  def factorial(n: Int): BigInt = {\n    @annotation.tailrec\n    def loop(acc: BigInt, remaining: Int): BigInt = {\n      if (remaining <= 1) acc\n      else loop(acc * remaining, remaining - 1)\n    }\n    loop(1, n)\n  }\n  \n  def fibonacci(n: Int): Stream[BigInt] = {\n    def fib(a: BigInt, b: BigInt): Stream[BigInt] = \n      a #:: fib(b, a + b)\n    fib(0, 1).take(n)\n  }\n}",
    "language": "Scala",
    "distractors": ["Java", "Kotlin", "F#"]
  },
  {
    "code": "my @numbers = (1, 2, 3, 4, 5);\nmy @squared = map { $_ ** 2 } @numbers;\n\nforeach my $num (@squared) {\n    print \"$num\\n\";\n}\n\nmy %hash = (\n    'name' => 'John',\n    'age' => 30\n);\n\nprint \"Name: $hash{'name'}\\n\";",
    "language": "Perl",
    "distractors": ["Ruby", "PHP", "Python"]
  },
  {
    "code": "local function quicksort(arr, low, high)\n    if low < high then\n        local pi = partition(arr, low, high)\n        quicksort(arr, low, pi - 1)\n        quicksort(arr, pi + 1, high)\n    end\nend\n\nlocal numbers = {64, 34, 25, 12, 22, 11, 90}\nquicksort(numbers, 1, #numbers)\n\nfor i, v in ipairs(numbers) do\n    print(v)\nend",
    "language": "Lua",
    "distractors": ["Ruby", "Python", "JavaScript"]
  },
  {
    "code": "class Calculator {\n  int _result = 0;\n  \n  Calculator add(int value) {\n    _result += value;\n    return this;\n  }\n  \n  Calculator multiply(int value) {\n    _result *= value;\n    return this;\n  }\n  \n  int get result => _result;\n  \n  void reset() => _result = 0;\n}",
    "language": "Dart",
    "distractors": ["JavaScript", "TypeScript", "Java"]
  },
  {
    "code": "A = [1, 2, 3; 4, 5, 6; 7, 8, 9];\nB = A';\neigenvalues = eig(A);\n[U, S, V] = svd(A);\n\nfunction result = fibonacci_matrix(n)\n    if n <= 1\n        result = n;\n    else\n        F = [1, 1; 1, 0];\n        result = F^(n-1);\n        result = result(1,1);\n    end\nend",
    "language": "MATLAB",
    "distractors": ["Octave", "R", "Julia"]
  },
  {
    "code": "$ErrorActionPreference = \"Stop\"\n\n$services = Get-Service | Where-Object {$_.Status -eq \"Running\"}\n\nforeach ($service in $services) {\n    Write-Host \"Service: $($service.Name) - Status: $($service.Status)\"\n}\n\n$processes = Get-Process | Sort-Object CPU -Descending | Select-Object -First 5\n$processes | Format-Table Name, CPU, WorkingSet",
    "language": "PowerShell",
    "distractors": ["Bash", "CMD", "Python"]
  },
  {
    "code": "defmodule BankAccount do\n  defstruct balance: 0, account_number: nil\n  \n  def new(account_number) do\n    %BankAccount{account_number: account_number}\n  end\n  \n  def deposit(%BankAccount{balance: balance} = account, amount) when amount > 0 do\n    %{account | balance: balance + amount}\n  end\n  \n  def withdraw(%BankAccount{balance: balance} = account, amount) \n      when amount > 0 and amount <= balance do\n    %{account | balance: balance - amount}\n  end\nend",
    "language": "Elixir",
    "distractors": ["Erlang", "Ruby", "Crystal"]
  },
  {
    "code": "(defn fibonacci [n]\n  (loop [a 0 b 1 count n]\n    (if (zero? count)\n      a\n      (recur b (+ a b) (dec count)))))\n\n(defn factorial [n]\n  (reduce * (range 1 (inc n))))\n\n(def numbers (range 1 11))\n(def squared (map #(* % %) numbers))\n(println \"Squared numbers:\" squared)",
    "language": "Clojure",
    "distractors": ["Lisp", "Scheme", "Racket"]
  },
  {
    "code": "open System\n\nlet rec factorial n =\n    match n with\n    | 0 | 1 -> 1\n    | _ -> n * factorial (n - 1)\n\nlet fibonacci n =\n    let rec fib a b count =\n        if count = 0 then a\n        else fib b (a + b) (count - 1)\n    fib 0 1 n\n\nlet numbers = [1..10]\nlet squared = numbers |> List.map (fun x -> x * x)",
    "language": "F#",
    "distractors": ["OCaml", "Haskell", "C#"]
  },
  {
    "code": "Module Calculator\n    Function Add(ByVal a As Integer, ByVal b As Integer) As Integer\n        Return a + b\n    End Function\n    \n    Function Multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n        Return a * b\n    End Function\n    \n    Sub Main()\n        Dim result As Integer = Add(5, 3)\n        Console.WriteLine($\"Result: {result}\")\n    End Sub\nEnd Module",
    "language": "VB.NET",
    "distractors": ["C#", "Visual Basic 6", "F#"]
  },
  {
    "code": "CREATE PROCEDURE GetTopCustomers\n    @MinOrderCount INT = 5\nAS\nBEGIN\n    SELECT \n        c.CustomerID,\n        c.CustomerName,\n        COUNT(o.OrderID) as OrderCount,\n        SUM(od.Quantity * od.UnitPrice) as TotalSpent\n    FROM Customers c\n    INNER JOIN Orders o ON c.CustomerID = o.CustomerID\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    GROUP BY c.CustomerID, c.CustomerName\n    HAVING COUNT(o.OrderID) >= @MinOrderCount\n    ORDER BY TotalSpent DESC\nEND",
    "language": "T-SQL",
    "distractors": ["SQL", "PL/SQL", "MySQL"]
  },
  {
    "code": "FOR i IN 1..10 LOOP\n    IF MOD(i, 2) = 0 THEN\n        DBMS_OUTPUT.PUT_LINE('Even number: ' || i);\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('Odd number: ' || i);\n    END IF;\nEND LOOP;\n\nDECLARE\n    CURSOR emp_cursor IS\n        SELECT employee_id, first_name, salary\n        FROM employees\n        WHERE salary > 50000;\nBEGIN\n    FOR emp_rec IN emp_cursor LOOP\n        DBMS_OUTPUT.PUT_LINE(emp_rec.first_name || ': ' || emp_rec.salary);\n    END LOOP;\nEND;",
    "language": "PL/SQL",
    "distractors": ["T-SQL", "Oracle", "SQL"]
  },
  {
    "code": "namespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass User extends Model\n{\n    protected $fillable = ['name', 'email', 'password'];\n    protected $hidden = ['password', 'remember_token'];\n    \n    public function posts(): HasMany\n    {\n        return $this->hasMany(Post::class);\n    }\n    \n    public function getFullNameAttribute(): string\n    {\n        return $this->first_name . ' ' . $this->last_name;\n    }\n}",
    "language": "PHP",
    "distractors": ["JavaScript", "Python", "C#"]
  },
  {
    "code": "type User struct {\n    ID       int64     `json:\"id\" db:\"id\"`\n    Name     string    `json:\"name\" db:\"name\"`\n    Email    string    `json:\"email\" db:\"email\"`\n    Created  time.Time `json:\"created_at\" db:\"created_at\"`\n}\n\nfunc (u *User) Validate() error {\n    if u.Name == \"\" {\n        return errors.New(\"name is required\")\n    }\n    if !strings.Contains(u.Email, \"@\") {\n        return errors.New(\"invalid email format\")\n    }\n    return nil\n}",
    "language": "Go",
    "distractors": ["Rust", "C", "Zig"]
  },
  {
    "code": "const sum = arr.reduce((acc, val) => acc + val, 0);\nconst average = sum / arr.length;\n\nconst users = [\n  { name: 'Alice', age: 25 },\n  { name: 'Bob', age: 30 },\n  { name: 'Charlie', age: 35 }\n];\n\nconst adults = users\n  .filter(user => user.age >= 18)\n  .map(user => ({ ...user, isAdult: true }));",
    "language": "JavaScript",
    "distractors": ["TypeScript", "Node.js", "Dart"]
  },
  {
    "code": "data = [10, 20, 30, 40, 50]\nfiltered = [x for x in data if x > 25]\ndict_comp = {i: i**2 for i in range(5)}\n\nclass Calculator:\n    def __init__(self):\n        self.history = []\n    \n    def add(self, a, b):\n        result = a + b\n        self.history.append(f\"{a} + {b} = {result}\")\n        return result",
    "language": "Python",
    "distractors": ["Ruby", "JavaScript", "Perl"]
  },
  {
    "code": "use std::collections::HashMap;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct User {\n    id: u64,\n    name: String,\n    email: String,\n}\n\nimpl User {\n    fn new(id: u64, name: String, email: String) -> Result<Self, String> {\n        if email.contains('@') {\n            Ok(User { id, name, email })\n        } else {\n            Err(\"Invalid email format\".to_string())\n        }\n    }\n}",
    "language": "Rust",
    "distractors": ["Go", "C++", "Swift"]
  },
  {
    "code": "public record Product(int Id, string Name, decimal Price)\n{\n    public decimal CalculateDiscount(decimal percentage) =>\n        Price * (percentage / 100);\n}\n\npublic class ProductService\n{\n    private readonly List<Product> _products = new();\n    \n    public async Task<Product?> GetByIdAsync(int id)\n    {\n        await Task.Delay(10); // Simulate async operation\n        return _products.FirstOrDefault(p => p.Id == id);\n    }\n}",
    "language": "Java",
    "distractors": ["C#", "Kotlin", "Scala"]
  },
  {
    "code": "$colors: (\n  primary: #3498db,\n  secondary: #2ecc71,\n  danger: #e74c3c\n);\n\n@mixin button-style($color) {\n  background-color: map-get($colors, $color);\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n}",
    "language": "SCSS",
    "distractors": ["CSS", "Sass", "Less"]
  },
  {
    "code": "version: '3.8'\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    environment:\n      NODE_ENV: production\n      DB_HOST: database\n    depends_on:\n      - database\n      - redis\n    volumes:\n      - ./logs:/app/logs\n  \n  database:\n    image: postgres:14\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:",
    "language": "YAML",
    "distractors": ["Docker Compose", "JSON", "TOML"]
  },
  {
    "code": "pragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 private storedData;\n    address public owner;\n    \n    event DataStored(uint256 indexed value, address indexed sender);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function set(uint256 value) public onlyOwner {\n        storedData = value;\n        emit DataStored(value, msg.sender);\n    }\n}",
    "language": "Solidity",
    "distractors": ["JavaScript", "Vyper", "Move"]
  },
  {
    "code": "(define (factorial n)\n  (if (<= n 1)\n      1\n      (* n (factorial (- n 1)))))\n\n(define (fibonacci n)\n  (cond ((<= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (fibonacci (- n 1))\n                 (fibonacci (- n 2))))))\n\n(map (lambda (x) (* x x)) '(1 2 3 4 5))",
    "language": "Scheme",
    "distractors": ["Lisp", "Clojure", "Racket"]
  },
  {
    "code": "program BinarySearch;\ntype\n  TIntArray = array of Integer;\n\nfunction BinarySearchFunc(const Arr: TIntArray; Target: Integer): Integer;\nvar\n  Left, Right, Mid: Integer;\nbegin\n  Left := 0;\n  Right := Length(Arr) - 1;\n  Result := -1;\n  \n  while Left <= Right do\n  begin\n    Mid := (Left + Right) div 2;\n    if Arr[Mid] = Target then\n      Exit(Mid)\n    else if Arr[Mid] < Target then\n      Left := Mid + 1\n    else\n      Right := Mid - 1;\n  end;\nend;",
    "language": "Pascal",
    "distractors": ["Ada", "Fortran", "Delphi"]
  },
  {
    "code": "interface UserRepository {\n  readonly users: User[];\n  findById(id: string): Promise<User | null>;\n  create(userData: CreateUserRequest): Promise<User>;\n  update(id: string, userData: Partial<User>): Promise<User>;\n  delete(id: string): Promise<boolean>;\n}\n\nclass DatabaseUserRepository implements UserRepository {\n  constructor(private db: Database) {}\n  \n  async findById(id: string): Promise<User | null> {\n    const result = await this.db.query('SELECT * FROM users WHERE id = ?', [id]);\n    return result.rows[0] || null;\n  }\n}",
    "language": "TypeScript",
    "distractors": ["JavaScript", "Java", "C#"]
  },
  {
    "code": "numbers = (1..100).to_a\neven_squares = numbers\n  .select(&:even?)\n  .map { |n| n ** 2 }\n  .select { |n| n > 100 }\n\nclass Person\n  attr_reader :name, :age\n  \n  def initialize(name, age)\n    @name, @age = name, age\n  end\n  \n  def adult?\n    age >= 18\n  end\nend",
    "language": "Ruby",
    "distractors": ["Python", "Crystal", "Perl"]
  },
  {
    "code": "matrix_a = [[1, 2], [3, 4]]\nmatrix_b = [[5, 6], [7, 8]]\n\ndef matrix_multiply(a, b)\n  result = Array.new(a.length) { Array.new(b[0].length, 0) }\n  \n  (0...a.length).each do |i|\n    (0...b[0].length).each do |j|\n      (0...b.length).each do |k|\n        result[i][j] += a[i][k] * b[k][j]\n      end\n    end\n  end\n  \n  result\nend",
    "language": "Ruby",
    "distractors": ["Python", "JavaScript", "Crystal"]
  },
  {
    "code": "import asyncio\nimport aiohttp\nfrom typing import List, Dict, Any\n\nclass AsyncAPIClient:\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n    \n    async def fetch_multiple(self, endpoints: List[str]) -> List[Dict[Any, Any]]:\n        async with aiohttp.ClientSession() as session:\n            tasks = [self._fetch_one(session, endpoint) for endpoint in endpoints]\n            results = await asyncio.gather(*tasks, return_exceptions=True)\n            return [r for r in results if not isinstance(r, Exception)]\n    \n    async def _fetch_one(self, session: aiohttp.ClientSession, endpoint: str):\n        async with session.get(f\"{self.base_url}/{endpoint}\") as response:\n            return await response.json()",
    "language": "Python",
    "distractors": ["JavaScript", "TypeScript", "C#"]
  }
]